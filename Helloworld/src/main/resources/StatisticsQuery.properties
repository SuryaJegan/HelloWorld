16=SELECT CASE WHEN a.country IS NULL THEN b.country ELSE a.country END cntry,COUNT(DISTINCT a.duns) biz_ip_future_duns, COUNT(DISTINCT b.duns) biz_ip_duns, SUM(CASE WHEN a.duns IS NOT NULL AND b.duns IS NOT NULL THEN 1 ELSE 0 END) overlapping_duns, count(distinct a.duns)::float * 100 / greatest(count(distinct b.duns), 1) percent_of_prior FROM (SELECT DISTINCT country, duns FROM biz_ip_future) a FULL OUTER JOIN (SELECT DISTINCT country, duns FROM biz_ip) b ON a.duns = b.duns AND a.country = b.country GROUP BY cntry ORDER BY biz_ip_duns DESC;
35=WITH isp_status_future AS ( SELECT isp_flag, CASE WHEN isp_flag_reason IS NULL THEN 'n/a' ELSE isp_flag_reason END isp_flag_reason, COUNT(*) ip_ranges, COUNT(DISTINCT duns) distinct_duns FROM biz_ip_future GROUP BY isp_flag, isp_flag_reason ), isp_status AS ( SELECT isp_flag, CASE WHEN isp_flag_reason IS NULL THEN 'n/a' ELSE isp_flag_reason END isp_flag_reason, COUNT(*) ip_ranges, COUNT(DISTINCT duns) distinct_duns FROM biz_ip GROUP BY isp_flag, isp_flag_reason ) SELECT a.isp_flag, a.isp_flag_reason, b.ip_ranges ip_ranges, a.ip_ranges ip_ranges_future, a.ip_ranges - b.ip_ranges ip_range_change, b.distinct_duns duns, a.distinct_duns duns_future, a.distinct_duns - b.distinct_duns duns_change FROM isp_status_future a FULL OUTER JOIN isp_status b   ON a.isp_flag = b.isp_flag  AND a.isp_flag_reason = b.isp_flag_reason;
isp_key_status=SELECT CASE WHEN a.ip_key IS NULL THEN 'new ip key' WHEN b.ip_key IS NULL THEN 'deleting ip key' ELSE 'existing ip key' END ip_key_status,COUNT(DISTINCT greatest(a.ip_key, b.ip_key)) ip_key_count,count(distinct a.duns) prior_duns_count, count(distinct b.duns) new_duns_count FROM biz_ip_class_c_expansion_prior a FULL OUTER JOIN biz_ip_class_c_expansion b ON a.ip_key = b.ip_key GROUP BY ip_key_status;
17=SELECT 'biz_ip' AS source, COUNT(*) ranges, SUM(ip_width) ip_addresses, COUNT(duns) ranges_w_duns, SUM(CASE WHEN isp_flag = 0 AND duns IS NOT NULL THEN 1 ELSE 0 END) ranges_nonisp, SUM(CASE WHEN isp_flag = 1 AND duns IS NOT NULL THEN 1 ELSE 0 END) ranges_isp FROM biz_ip UNION SELECT 'biz_ip_<YYYYMM>' AS source, COUNT(*) ranges, SUM(ip_width) ip_addresses, COUNT(duns) ranges_w_duns, SUM(CASE WHEN isp_flag = 0 AND duns IS NOT NULL THEN 1 ELSE 0 END) ranges_nonisp, SUM(CASE WHEN isp_flag = 1 AND duns IS NOT NULL THEN 1 ELSE 0 END) ranges_isp FROM biz_ip_<YYYYMM>;
update_process_status=update process_status_tracker set last_updated_date=current_date, status=?, comments=? where pst_id=?; 
check_process_status=select pst_id from process_status_tracker where process_id=? and to_char(start_date, 'MMYYYY') = to_char(current_date, 'MMYYYY');
insert_process_status=insert into process_status_tracker(process_id,start_date,last_updated_date,status,comments) values(?,current_date,current_date,?,?);
training_set_count=SELECT COUNT(*) AS trainingSetCount FROM ISP_TRAINING_SET_FINAL;
isp_ratio=SELECT COUNT(CASE WHEN isp_class = 0 THEN 'NonIsp' END) AS NonIsp,COUNT(CASE WHEN isp_class = 1 THEN 'Isp' END) AS Isp,COUNT(CASE WHEN isp_class = 1 THEN 'Isp' END)*100/COUNT(CASE WHEN isp_class = 0 THEN 'NonIsp' END) as Ratio_ISPoverNonISP FROM ISP_TRAINING_SET_FINAL;
test_set_count=select count(*)testSetCount from isp_test_set_final; 
top_isp_non_isp_count=select count(case when model_prediction = false then 1 end) predictedNonISP,count(case when model_prediction = True then 1 end) predictedISP from (SELECT a.ip_duns, b.business_name, model_prediction, prob_0, prob_isp_class_all AS prob_1, COUNT(*) AS visits_total FROM vi_logs_current a LEFT JOIN isp_class_prob_upload b ON a.ip_duns = b.ip_duns WHERE b.business_name IS NOT NULL GROUP BY a.ip_duns, b.business_name, model_prediction, prob_0, prob_isp_class_all ORDER BY COUNT(*) DESC LIMIT 200);
add_isp_flag=ALTER TABLE vi_logs_current ADD COLUMN isp_flag boolean;
update_isp_flag_vi_logs=UPDATE vi_logs_current SET isp_flag = b.isp_flag FROM (SELECT DISTINCT duns, isp_flag FROM biz_ip) b WHERE b.duns = ip_duns;
percent_global_match_rate=SELECT SUM(CASE WHEN sitedunsid IS NOT NULL AND responsedunssource IN (1,2) THEN 1 WHEN ip_duns IS NOT NULL AND isp_flag = 0 THEN 1 ELSE 0 END) * 100/ COUNT(*) AS percent_global_matchrate FROM vi_logs_current WHERE customer_id IS NOT NULL;
customer_match_rate=SELECT customer_id,COUNT(*) total_visits, SUM(CASE WHEN sitedunsid IS NOT NULL THEN 1 ELSE 0 END) Matched_visits, SUM(CASE WHEN sitedunsid IS NOT NULL AND responsedunssource IN (1,2) THEN 1 WHEN ip_duns IS NOT NULL AND isp_flag = 0 THEN 1 ELSE 0 END) Expected_match, SUM(CASE WHEN sitedunsid IS NOT NULL THEN 1 ELSE 0 END)*100 / COUNT(*) AS OldPercent_Match_Rate, SUM(CASE WHEN sitedunsid IS NOT NULL AND responsedunssource IN (1,2) THEN 1 WHEN ip_duns IS NOT NULL AND isp_flag = 0 THEN 1 ELSE 0 END)*100 / COUNT(*) AS ExpectedPercent_Match_Rate, (SUM(CASE WHEN sitedunsid IS NOT NULL AND responsedunssource IN (1,2) THEN 1 WHEN ip_duns IS NOT NULL AND isp_flag = 0 THEN 1 ELSE 0 END)*100 / COUNT(*)) -(SUM(CASE WHEN sitedunsid IS NOT NULL THEN 1 ELSE 0 END)*100 / COUNT(*)) AS NetPercent_Difference FROM vi_logs_current WHERE customer_id IS NOT NULL GROUP BY customer_id;